{"version":3,"sources":["Quiz.jsx","App.js","index.js"],"names":["Quiz","quizData","question","answerOptions","answer","isCorrect","sort","Math","random","console","log","useState","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","scoreBoard","length","className","dangerouslySetInnerHTML","__html","map","options","i","onClick","prevScore","curQues","App","rootElement","document","getElementById","createRoot","render"],"mappings":"mKA0FeA,EAxFF,WACX,IAAMC,EAAW,CACf,CACEC,SAAU,8BACVC,cAAe,CACb,CAAEC,OAAQ,kBAAmBC,WAAW,GACxC,CAAED,OAAQ,aAAcC,WAAW,GACnC,CAAED,OAAQ,aAAcC,WAAW,GACnC,CAAED,OAAQ,kBAAmBC,WAAW,KAG5C,CACEH,SAAU,mCACVC,cAAe,CACb,CAAEC,OAAQ,kBAAmBC,WAAW,GACxC,CAAED,OAAQ,aAAcC,WAAW,GACnC,CAAED,OAAQ,aAAcC,WAAW,GACnC,CAAED,OAAQ,kBAAmBC,WAAW,KAG5C,CACEH,SAAU,+BACVC,cAAe,CACb,CAAEC,OAAQ,kBAAmBC,WAAW,GACxC,CAAED,OAAQ,aAAcC,WAAW,GACnC,CAAED,OAAQ,aAAcC,WAAW,GACnC,CAAED,OAAQ,kBAAmBC,WAAW,MAStCJ,EAHAK,MAAK,kBAAMC,KAAKC,SAAW,EAAtB,IAIbC,QAAQC,IAAIT,GAEZ,MAA8CU,mBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAeMC,EAAU,2CAAuCF,EAAvC,mBAAuDf,EAASkB,OAAhE,uGAKhB,OACE,qBAAKC,UAAU,YAAf,SACGN,EACC,mCACE,qBAAKO,wBAAyB,CAAEC,OAAQJ,OAG1C,qCACE,2CACYN,EAAkB,EAD9B,MACoCX,EAASkB,OAD7C,OAGA,4BAAIlB,EAASW,GAAiBV,WAC9B,mBAAGkB,UAAU,iBAAb,SACGnB,EAASW,GAAiBT,cAAcoB,KAAI,SAACC,EAASC,GAAV,OAC3C,wBACEC,QAAS,kBAAsBF,EAAQnB,WA/BjDY,GAAS,SAACU,GAAD,OAAeA,EAAY,CAA3B,SAGUf,EAAkB,EACpBX,EAASkB,OAC1BN,GAAmB,SAACe,GAAD,OAAaA,EAAU,CAAvB,IAEnBb,GAAa,GAwBM,EADX,SAIGS,EAAQpB,QAFJqB,EAHoC,UAaxD,ECrFc,SAASI,IACtB,OACE,sBAAKT,UAAU,MAAf,UACE,sDACA,uBACA,uBACA,uBACA,cAAC,EAAD,MAGL,CCRD,IAAMU,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACL,EAAD,M","file":"static/js/main.6196fe18.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst Quiz = () => {\r\n  const quizData = [\r\n    {\r\n      question: \"Who is the founder of Meta?\",\r\n      answerOptions: [\r\n        { answer: \"Mark Zuckerburg\", isCorrect: true },\r\n        { answer: \"Steve Jobs\", isCorrect: false },\r\n        { answer: \"Bill Gates\", isCorrect: false },\r\n        { answer: \"Robert Kiyosaki\", isCorrect: false }\r\n      ]\r\n    },\r\n    {\r\n      question: \"Who is the founder of Microsoft?\",\r\n      answerOptions: [\r\n        { answer: \"Mark Zuckerburg\", isCorrect: false },\r\n        { answer: \"Steve Jobs\", isCorrect: false },\r\n        { answer: \"Bill Gates\", isCorrect: true },\r\n        { answer: \"Robert Kiyosaki\", isCorrect: false }\r\n      ]\r\n    },\r\n    {\r\n      question: \"Who is the founder of Apple?\",\r\n      answerOptions: [\r\n        { answer: \"Mark Zuckerburg\", isCorrect: false },\r\n        { answer: \"Steve Jobs\", isCorrect: true },\r\n        { answer: \"Bill Gates\", isCorrect: false },\r\n        { answer: \"Robert Kiyosaki\", isCorrect: false }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const shuffle = (array) => {\r\n    array.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  shuffle(quizData);\r\n  console.log(quizData);\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const checkAnsHandler = (ans) => {\r\n    if (ans) {\r\n      setScore((prevScore) => prevScore + 1);\r\n    }\r\n\r\n    const nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < quizData.length) {\r\n      setCurrentQuestion((curQues) => curQues + 1);\r\n    } else {\r\n      setShowScore(true);\r\n    }\r\n  };\r\n\r\n  const scoreBoard = `Game Over: <br /> Your Score is: ${score} out of ${quizData.length} <br/> <br/> <br/> \r\n  <button onClick={window.location.reload()}>\r\n    Retry the game\r\n  </button>`;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {showScore ? (\r\n        <>\r\n          <div dangerouslySetInnerHTML={{ __html: scoreBoard }}></div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>\r\n            Question {currentQuestion + 1} / {quizData.length}:\r\n          </h4>\r\n          <p>{quizData[currentQuestion].question}</p>\r\n          <p className=\"grid-container\">\r\n            {quizData[currentQuestion].answerOptions.map((options, i) => (\r\n              <button\r\n                onClick={() => checkAnsHandler(options.isCorrect)}\r\n                key={i}\r\n              >\r\n                {options.answer}\r\n              </button>\r\n            ))}\r\n          </p>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import \"./styles.css\";\nimport Quiz from \"./Quiz\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Quiz Game</h1>\n      <br />\n      <br />\n      <br />\n      <Quiz />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}